<?php

namespace {{ packageNameSpace }};

use {{ packageNameSpace }}\Interfaces\DummyClassInterface;
use Illuminate\Database\Eloquent\Collection;
use olckerstech\core\src\Models\{{entityName}};
use Ramsey\Uuid\Uuid;
/*
* Classes are stubbed out to match interface and returns only true.
* Repositories and interfaces need to be registered in a service provider
*/

class DummyClass implements DummyClassInterface
{
    /**
     * Get's item by it's ID
     *
     * @param string $id
     * @param array|null $filters
     * @return {{entityName}}|null
     */
    public function get(string $id, array $filters = null)
    {
        if(Uuid::isValid($id)) {
            return {{entityName}}::where('id', $id)->first();
        }
        if(!empty($filters) && is_array($filters)){
            $get = $this->cleanArray($filters);
            return {{entityName}}::where($get)->first();
        }
        return null;
    }

    /**
     * Get's a item by it's ID that has been deleted
     *
     * @param string $id
     * @param array|null $filters
     * @return {{entityName}}|null
     */
    public function getTrashed(string $id, array $filters = null)
    {
        if(Uuid::isValid($id)) {
            return {{entityName}}::onlyTrashed()->where('id', $id)->first();
        }
        if(!empty($filters) && is_array($filters)){
            $get = $this->cleanArray($filters);
            return {{entityName}}::onlyTrashed()->where($get)->first();
        }
        return null;
    }

    /**
     * Count number of records
     *
     * @param array|null $filters
     * @return integer
     */
    public function count(array $filters = null)
    {
        if (is_array($filters)) {
            $array = $this->cleanArray($filters);
            return {{entityName}}::where($array)->count();
        }
        return {{entityName}}::count();
    }

    /**
     * Count number of records
     *
     * @param array|null $filters
     * @return integer
     */
    public function countTrashed(array $filters = null)
    {
        if (is_array($filters)) {
            $array = $this->cleanArray($filters);
            return {{entityName}}::onlyTrashed()->where($array)->count();
        }
        return {{entityName}}::onlyTrashed()->count();
    }

    /**
     * Get's all items that has not been deleted
     *
     * @param array|null $filters
     * @return mixed
     */
    public function all(array $filters = null)
    {
        if (is_array($filters)) {
            $array = $this->cleanArray($filters);
            return {{entityName}}::where($array)->get();
        }
        return {{entityName}}::all();
    }

    /**
     * Get's all items that has been deleted.
     *
     * @param array|null $filters
     * @return mixed
     */
    public function allTrashed(array $filters = null)
    {
        if (is_array($filters)) {
            $array = $this->cleanArray($filters);
            return {{entityName}}::onlyTrashed()->where($array)->get();
        }
        return {{entityName}}::onlyTrashed()->get();
    }

    /**
     * Get's all items including deleted items.
     *
     * @param array|null $filters
     * @return mixed
     */
    public function allWithTrashed(array $filters = null)
    {
        if (is_array($filters)) {
            $array = $this->cleanArray($filters);
            return {{entityName}}::withTrashed()->where($array)->get();
        }
        return {{entityName}}::withTrashed()->get();
    }

    /**
     * Deletes a item.
     *
     * @param string $id
     * @param array|null $filters
     * @param $mixed
     * @return bool
     * @throws \Exception
     */
    public function delete(string $id, array $filters = null, $mixed = null)
    {
        if(!empty($id) && Uuid::isValid($id)){
            if({{entityName}}::withTrashed()->where('id', $id)->delete()){
                return true;
            }
            return false;
        }

        if(!empty($filters) && is_array($filters)){
            $recover = $this->cleanArray($filters);
            if({{entityName}}::withTrashed()->where($recover)->delete()){
                return true;
            }
            return false;
        }

        if ($mixed instanceof Collection) {
            if ({{entityName}}::withTrashed()->whereIn('id', $mixed->pluck('id'))->delete()) {
                return true;
            }
            return false;
        }

        if ($mixed instanceof {{entityName}}) {
            if($mixed->delete()){
                return true;
            }
            return false;
        }

        return false;
    }

    /**
     * permanently deletes a item.
     *
     * @param string $id
     * @param array|null $filters
     * @param null $mixed
     * @return bool
     */
    public function destroy(string $id, array $filters = null, $mixed = null)
    {
        if(!empty($id) && Uuid::isValid($id)){
            if({{entityName}}::withTrashed()->where('id', $id)->forceDelete()){
                return true;
            }
            return false;
        }

        if(!empty($filters) && is_array($filters)){
            $destroy = $this->cleanArray($filters);
            if({{entityName}}::withTrashed()->where($destroy)->forceDelete()){
                return true;
            }
            return false;
        }

        if ($mixed instanceof Collection) {
            if ({{entityName}}::withTrashed()->whereIn('id', $mixed->pluck('id'))->forceDelete()) {
                return true;
            }
            return false;
        }

        if ($mixed instanceof {{entityName}}) {
            if($mixed->forceDelete()){
                return true;
            }
            return false;
        }

        return false;
    }

    /**
     * recovers a deleted item.
     *
     * @param string $id
     * @param array|null $filters
     * @param mixed
     * @return bool|null
     */
    public function recover(string $id, array $filters = null, $mixed = null)
    {
        if(!empty($id) && Uuid::isValid($id)){
            if({{entityName}}::withTrashed()->where('id', $id)->restore()){
                return true;
            }
            return false;
        }

        if(!empty($filters) && is_array($filters)){
            $recover = $this->cleanArray($filters);
            if({{entityName}}::withTrashed()->where($recover)->restore()){
                return true;
            }
            return false;
        }

        if ($mixed instanceof Collection) {
            if ({{entityName}}::withTrashed()->whereIn('id', $mixed->pluck('id'))->restore()) {
                return true;
            }
            return false;
        }

        if ($mixed instanceof {{entityName}}) {
            if($mixed->restore()){
                return true;
            }
            return false;
        }

        return false;
    }

    /**
     * Updates a item.
     *
     * @param string $id
     * @param array|null $filters
     * @param $mixed
     * @return bool
     */
    public function update(string $id, array $filters = null, $mixed = null)
    {
        if(!empty($id) && Uuid::isValid($id)){
            $update = $this->cleanArray($mixed);
            if({{entityName}}::where('id', $id)->update($update)){
                return true;
            }
            return false;
        }

        if(!empty($filters) && is_array($filters)){
            $filters = $this->cleanArray($filters);
            $update = $this->cleanArray($mixed);
            if({{entityName}}::where($filters)->update($update)){
                return true;
            }
            return false;
        }

        if ($mixed instanceof Collection) {
            $return = true;
            foreach ($mixed as $model) {
                if (!$model->save()) {
                    $return = false;
                }
            }
            return $return;
        }

        if ($mixed instanceof {{entityName}}) {
            if($mixed->save()){
                return true;
            }
            return false;
        }

        return false;
    }

    /**
     * Creates a item.
     *
     * @param {{entityName}} $model
     * @return bool
     */
    public function create({{entityName}} $model)
    {
        return $model->save();
    }

    /**
     * Create new model
     *
     * @return {{entityName}}
     */
    public function getNewModel()
    {
        return new {{entityName}}();
    }

    /**
     * Filters array for allowed values
     *
     * @param array $array
     * @return array
     */
    private function cleanArray(array $array)
    {
        $allowed = [
            'name' => '',
            //'user_id' => '',
            //'stub' => '',
            //'password' => '',
        ];
        $return = [];

        if(is_array($array)) {
            foreach ($array as $key => $value) {
                if (array_key_exists($key, $allowed)) {
                   // if ($key === 'email' && !Validator::make(['email' => $value], ['email' => 'email:rfc,dns'])->validate()) {
                   //     $value = '';
                   // }
                    $return += [$key => $value];
                }
            }
        }
        return $return;
    }
}
