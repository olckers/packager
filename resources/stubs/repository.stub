<?php

namespace {{ packageNameSpace }};

use Illuminate\Database\Eloquent\Collection;
use {{ basePackage }}\Models\{{ modelName }};
use {{ packageNameSpace }}\Interfaces\DummyClassInterface;
use olckerstech\core\Traits\SearchParser;
use Ramsey\Uuid\Uuid;

/*
* Classes are stubbed out to match interface and returns only true.
* Repositories and interfaces need to be registered in a service provider
*/

class DummyClass implements DummyClassInterface
{
    use SearchParser;

    protected $allowedFilters = [
        'name' => '',
        'email' => '',
        'password' => '',
    ];
    /**
     * Get's item by it's ID
     *
     * @param string $id
     * @param array|null $filters
     * @return {{ modelName }}|null
     */
    public function get(string $id, array $filters = null)
    {
        if (Uuid::isValid($id)) {
            return {{ modelName }}::where('id', $id)->first();
        }
        if (!empty($filters) && is_array($filters)) {
            $get = $this->cleanArray($filters);
            return {{ modelName }}::where($get)->first();
        }
        abort(400, 'Invalid parameters trying to get {{ modelName }}');
    }

    /**
     * Get's a item by it's ID that has been deleted
     *
     * @param string $id
     * @param array|null $filters
     * @return {{ modelName }}|null
     */
    public function getTrashed(string $id, array $filters = null)
    {
        if (Uuid::isValid($id)) {
            return {{ modelName }}::onlyTrashed()->where('id', $id)->first();
        }
        if (!empty($filters) && is_array($filters)) {
            $get = $this->cleanArray($filters);
            return {{ modelName }}::onlyTrashed()->where($get)->first();
        }
        abort(400, 'Invalid parameters trying to get trashed {{ modelName }}');
    }

    /**
     * Count number of records
     *
     * @param array|null $filters
     * @return integer
     */
    public function count(array $filters = null)
    {
        if (is_array($filters)) {
            $array = $this->cleanArray($filters);
            return {{ modelName }}::where($array)->count();
        }
        return {{ modelName }}::count();
    }

    /**
     * Count number of records
     *
     * @param array|null $filters
     * @return integer
     */
    public function countTrashed(array $filters = null)
    {
        if (is_array($filters)) {
            $array = $this->cleanArray($filters);
            return {{ modelName }}::onlyTrashed()->where($array)->count();
        }
        return {{ modelName }}::onlyTrashed()->count();
    }

    /**
     * Get's all items that has not been deleted
     *
     * @param array|null $filters
     * @return mixed
     */
    public function all(array $filters = null)
    {
        if (is_array($filters)) {
            if (array_key_exists('values', $filters)) {
                $parsedFilters = $this->parseFilters($filters);
                return {{ modelName }}::where($parsedFilters)->get();
            }
            return {{ modelName }}::where($filters)->get();
        }
        return {{ modelName }}::all();
    }

    /**
     * Get's all items that has been deleted.
     *
     * @param array|null $filters
     * @return mixed
     */
    public function allTrashed(array $filters = null)
    {
        if (is_array($filters)) {
            if (array_key_exists('values', $filters)) {
                $parsedFilters = $this->parseFilters($filters);
                return {{ modelName }}::onlyTrashed()->where($parsedFilters)->get();
            }
            return {{ modelName }}::onlyTrashed()->where($filters)->get();
        }
        return {{ modelName }}::onlyTrashed()->get();
    }

    /**
     * Get's all items including deleted items.
     *
     * @param array|null $filters
     * @return mixed
     */
    public function allWithTrashed(array $filters = null)
    {
        if (is_array($filters)) {
            $array = $this->cleanArray($filters);
            return {{ modelName }}::withTrashed()->where($array)->get();
        }
        return {{ modelName }}::withTrashed()->get();
    }

    /**
     * Deletes a item.
     *
     * @param string $id
     * @param array|null $filters
     * @param $mixed
     * @return bool
     * @throws \Exception
     */
    public function delete(string $id, array $filters = null, $mixed = null)
    {
        if (!empty($id) && Uuid::isValid($id)) {
            return {{ modelName }}::destroy($id);
        }

        if (!empty($filters) && is_array($filters)) {
            $delete = $this->cleanArray($filters);
            return {{ modelName }}::where($delete)->delete();
        }

        if ($mixed instanceof Collection) {
            return {{ modelName }}::whereIn('id', $mixed->pluck('id'))->delete();
        }

        if ($mixed instanceof {{ modelName }}) {
            return $mixed->delete();
        }

        if(!empty($mixed) && is_array($mixed)){
            $canDelete = true;
            foreach($mixed as $delete){
                if(!Uuid::isValid($delete)){
                    $canDelete = false;
                }
            }
            if($canDelete){
                return {{ modelName }}::destroy($mixed);
            }
        }

        abort(400, 'Invalid parameters trying to delete {{ modelName }}');
    }

    /**
     * permanently deletes a item.
     *
     * @param string $id
     * @param array|null $filters
     * @param null $mixed
     * @return bool
     */
    public function destroy(string $id, array $filters = null, $mixed = null)
    {
        if (!empty($id) && Uuid::isValid($id)) {
            return {{ modelName }}::withTrashed()->where('id', $id)->forceDelete();
        }

        if (!empty($filters) && is_array($filters)) {
            $destroy = $this->cleanArray($filters);
            return {{ modelName }}::withTrashed()->where($destroy)->forceDelete();
        }

        if ($mixed instanceof Collection) {
            return {{ modelName }}::withTrashed()->whereIn('id', $mixed->pluck('id'))->forceDelete();
        }

        if ($mixed instanceof {{ modelName }}) {
            return $mixed->forceDelete();
        }

        if(!empty($mixed) && is_array($mixed)){
            $canDelete = true;
            foreach($mixed as $delete){
                if(!Uuid::isValid($delete)){
                    $canDelete = false;
                }
            }
            if($canDelete){
                $i = 0;
                foreach($mixed as $forceDeleteId){
                    if({{ modelName }}::onlyTrashed()->where('id', $forceDeleteId)->forceDelete()){
                        $i++;
                    }
                }
                return ['count' => $i];
            }
        }

        abort(400, 'Invalid parameters trying to destroy trashed {{ modelName }}');
    }

    /**
     * recovers a deleted item.
     *
     * @param string $id
     * @param array|null $filters
     * @param mixed
     * @return bool|null
     */
    public function recover(string $id, array $filters = null, $mixed = null)
    {
        if (!empty($id) && Uuid::isValid($id)) {
            return {{ modelName }}::withTrashed()->where('id', $id)->restore();
        }

        if (!empty($filters) && is_array($filters)) {
            $recover = $this->cleanArray($filters);
            return {{ modelName }}::withTrashed()->where($recover)->restore();
        }

        if ($mixed instanceof Collection) {
            return {{ modelName }}::withTrashed()->whereIn('id', $mixed->pluck('id'))->restore();
        }

        if ($mixed instanceof {{ modelName }}) {
            return $mixed->restore();
        }

        abort(400, 'Invalid parameters trying to recover trashed {{ modelName }}');
    }

    /**
     * Updates a item.
     *
     * @param string $id
     * @param array|null $filters
     * @param $mixed
     * @return bool|Collection|null
     */
    public function update(string $id, array $filters = null, $mixed = null)
    {
        if (!empty($id) && Uuid::isValid($id)) {
            $update = $this->cleanArray($mixed);
            return {{ modelName }}::where('id', $id)->update($update);
        }

        if (!empty($filters) && is_array($filters)) {
            $filters = $this->cleanArray($filters);
            $update = $this->cleanArray($mixed);
            return {{ modelName }}::where($filters)->update($update);
        }

        if ($mixed instanceof Collection) {
            foreach ($mixed as $model) {
                if (!$model->save()) {
                    abort(400, 'Failed updating {{ modelName }} in Collection');
                }
            }
            return $mixed;
        }

        if ($mixed instanceof {{ modelName }}) {
            return $mixed->save();
        }

        abort(400, 'Invalid parameters trying to update {{ modelName }}');
    }

    /**
     * Creates a item.
     *
     * @param $mixed
     * @return bool
     * @throws \Throwable
     */
    public function create($mixed)
    {
        if (is_array($mixed)) {
            $cleaned = $this->cleanArray($mixed);
            return {{ modelName }}::create($cleaned);
        }

        if ($mixed instanceof {{ modelName }}) {
            return $mixed->saveOrFail();
        }

        abort(400, 'Failed creating {{ modelName }}');
    }

    /**
     * Create new model
     *
     * @return {{ modelName }}
     */
    public function getNewModel()
    {
        return new {{ modelName }}();
    }
}
